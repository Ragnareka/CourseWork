#include "stdafx.h"
#include "stdafx.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <cstdlib>



using namespace std;


struct Base // ñòðóêòóðà äàííûõ 

{
   char tiker[35];
	  char per[10];
	int dateymd;
	float openPrice;
	float maxPrice;
	float minPrice;
	float closePrice;
	float volume;
	float Doch;
	float Risk;
	
//	
   };


struct Analys // ñòðóêòóðà äàííûõ 

{ char tiker[35];
	 float OgDoh;
	 float Risk;
	 float kov;

    // îñòàëüíûå ýëåìåíòû ñòðóêòóðû  
	
};



    bool comparer (const Base& a, const Base& b) 
    { if (strcmp(a.tiker, b.tiker) == -1)
		{return true;}
	else { return false;}
    };
	
	void print (float **mas, int n, int t)
	{cout<<"tiker ";
		for (int i = 0; i<(t+1); i++){
	 for (int h = 0; h<n+1; h++)
	{ 
	 cout<<mas[i][h]<<"	";
	 }cout<<endl;}
	};
	

int main()
{ 
	
	
vector <Base> VecBase; //Âåêòîð vecBase ñîäåðæèò ñòðóêòóðû òèïà Base äëÿ ðàáîòû ñ äàííûìè íà äàííûé ìîìåíò
ifstream in ("BaseData.txt");

Base data; //×òîáû ïîìåñòèòü â ñòðóêòóðó îáúåêò, îáúåêò äîëæåí ñóùåñòâîâàòü
int n=0;
while (in.peek()!=EOF)//ïîêà íå ñ÷èòàí ìàðêåð êîíöà ôàéëà
{  VecBase.push_back(data); 
	in>>VecBase.at(n).tiker;
		in>>VecBase.at(n).per;
	in>>VecBase.at(n).dateymd;
	in>>VecBase.at(n).openPrice;
	in>>VecBase.at(n).maxPrice;
	in>>VecBase.at(n).minPrice;
	in>>VecBase.at(n).closePrice;
	in>>VecBase.at(n).volume;

// others
n++;
};

in.close();

std::sort(VecBase.begin(), VecBase.end(), comparer );
vector <Analys> vec;
Analys tabl;



for (int i=0; i<n; i++) 
{ 
	if ( i !=0 && strcmp( VecBase[i].tiker, VecBase[i-1].tiker) == 0 )
	{
	VecBase[i].Doch = 100*( log (VecBase[i].closePrice / VecBase[i-1].closePrice)) ;

	}
	else {VecBase[i].Doch = 0;
	
	 ;}
		
}; 

 int k=0;
int chet = 0;
float sum=0;
 // вычисление ожидаемой доходности
	 for (int i=0; i<n; i++) 
	{  
		if ( i!= 0 && strcmp( VecBase[i].tiker, VecBase[i-1].tiker) == 0 )
		{ 
		chet ++;
		sum= sum+ VecBase[i].Doch;
			if (i==n-1)
			{	
				vec[k].OgDoh = sum/chet; 
				break;
			}
		}
		else
		{ 
			if (i == 0)
			{	
			vec.push_back(tabl);
			strcpy( vec[0].tiker,  VecBase[0].tiker); 
			chet=1;
			
		}
			else
			{  
				vec[k].OgDoh = sum/chet; 
				k++; 
				vec.push_back(tabl);
				strcpy( vec[k].tiker,  VecBase[i].tiker);
				chet=1;
				sum=0; 
			}
		}
			
	}; 
	int kol=chet;
	int t=0;
	sum =0;
	
	// вычисление рисков

	
	
	  for (int i=0; i<n; i++) 
	{ 
	if ( i==0) { VecBase[0].Risk = abs(VecBase[0].Doch - vec[0].OgDoh);
		sum = pow (VecBase[0].Risk, 2);
	//vec[0].kov =  VecBase[0].Risk;
	}
		else
		{ VecBase[i].Risk =  abs ( VecBase[i].Doch - vec[t].OgDoh);
		if ( i % kol == 0)
		{
		vec[t].Risk = sqrt(sum/(kol-1));
		//vec[t].kov = vec[t].kov * VecBase[i].Risk;
		t++;
		//vec[t].kov = 1;
		}
		else
		{
			if ( i==n-1) 
			{  // VecBase[i].Risk = abs(VecBase[i].Doch - vec[t].OgDoh);
				vec[t].Risk = sqrt(sum/(kol-1));
				//vec[t].kov = vec[t].kov * VecBase[i].Risk;
				break;
			}
			else
			{ //VecBase[i].Risk =  abs ( VecBase[i].Doch - vec[t].OgDoh);
			sum = sum + VecBase[i].Risk;
			//vec[t].kov = vec[t].kov * VecBase[i].Risk;
			 }
		}}
	  };
	  int ko= chet+1;
	  float oh = 1/ko;
	//ковариация 
	const int T = t;
	float **mas = new float* [n];
	for ( int i=0; i<n; i++) 
	{mas[i] = new float [n];	}
	
	int g =0;

	for (int i = 0; i<n; i++)
	{ 
		if(i==0)
	{// mas[0][0] = VecBase[0].Risk * VecBase[0].Risk;
	g = 0;
	for ( int b = 0; b<n;b++)
		mas [g][b] = VecBase[i].Risk * VecBase[b].Risk;
	}
	else{
		if (i % ko == 0) 
		{ g++;
		mas [g][0] = VecBase[i].Risk * VecBase[0].Risk;
		}
		else
		{ 
			g++;
			for ( int b = 0; b<n;b++)
		mas [g][b] = VecBase[i].Risk * VecBase[b].Risk;
		}
	}
	}
	/*
	  */
	float **summa = new float* [n];
	for ( int i=0; i<n; i++) 
	{summa[i] = new float [n];	}
	 for (int b = 0; b<ko;b++){
	  for (int f = 0; f<ko;f++){
		  summa[b][f] = 0;
		  for (int i = 0; i<ko;i++){
			  summa[b][f] = mas[b][f+i] + summa[b][f];}}}
	

	 float **Kovar = new float* [n];
	for ( int i=0; i<n; i++) 
	{Kovar[i] = new float [n];	}

	  for (int b = 0; b<ko;b++){
	  for (int f = 0; f<ko;f++){
		  
		  Kovar[b][f] = summa[b][f]/ko;
		
	  }
	  }
	  //// генетический алгоритм

/*   for (int i=0; i<n; i++) {
    cout << VecBase[i].tiker << '	'<< VecBase[i].per<< '	' << VecBase[i].Doch << '	' << VecBase[i].Risk <<endl; }; 
	 for (int j=0; j<k+1; j++) {
		  cout <<  '	'<< endl;
		  cout << vec[j].tiker<< '	'<< vec[j].OgDoh << '	'<< vec[j].Risk <<endl;
	 } */
	// print (mas,n,t);
	  print (Kovar,t,t);
	 //  print (summa,t,t);
 
   system("pause");

	return 0;
}
